Include: silence_test_helper.vader
Before:
  let g:ale_silence_TESTING = 1
  let g:ale_loaded = 1
  " runtime plugin/ale-silence.vim
  runtime autoload/ale/silence.vim

  let g:ale_linter_silence_directive = TestLinters()

  let Entry1       = EntryFor('test1')
  let Entry2       = EntryFor('test2')
  let InlineOnly   = EntryFor('inline-only')
  let NextlineOnly = EntryFor('nextline-only')
  let Rubocop      = EntryFor('rubocop')

Given ruby:
  def foo
    :bar
  end

Execute:
  let bnr = bufnr('')
  call S('disable_inline', [Entry1(bnr, 1, 'error2')])
  call S('disable_inline', [
      \ Entry1(bufnr(''), 2, 'error1'),
      \ Entry2(bufnr(''), 2, 'error1')
      \ ])
  call S('disable_inline', [])

Expect ruby (s:disable_inline silences inline linewise):
  def foo # test1-inline: error2
    :bar # test1-inline: error1 # test2-inline: error1
  end

Execute:
  let bnr = bufnr('')
  call S('disable_next_line', [Entry1(bnr, 1, 'error2')])
  call S('disable_next_line', [
      \ Entry1(bufnr(''), 3, 'error1'),
      \ Entry2(bufnr(''), 3, 'error1')
      \ ])
  call S('disable_next_line', [])

Expect ruby (s:disable_next_line silences inline next line):
  # test1-nextline: error2
  def foo
    # test1-nextline: error1 # test2-nextline: error1
    :bar
  end

Given ruby:
  def foo
    if bar
      :bar
    else
      :baz
    end
  end

Execute (s:disable_next_line returns remainder with updated line numbers):
  let bnr = bufnr('')
  let g:remainder = S('disable_next_line', [
      \ NextlineOnly(bnr, 3, 'error1'),
      \ InlineOnly(bnr, 1, 'error3'),
      \ InlineOnly(bnr, 3, 'error1'),
      \ InlineOnly(bnr, 6, 'error4')
      \ ])
  let g:remainder = S('disable_next_line',
                    \ [NextlineOnly(bnr, 6, 'error2')] + g:remainder)
  AssertEqual [
      \ InlineOnly(bnr, 1, 'error3'),
      \ InlineOnly(bnr, 4, 'error1'),
      \ InlineOnly(bnr, 8, 'error4')
      \ ], g:remainder

Expect ruby (s:disable_next_line updates line number):
  def foo
    if bar
      # nextline-only: error1
      :bar
    else
      # nextline-only: error2
      :baz
    end
  end

Execute:
  let bnr = bufnr('')
  call S('disable_range', [Entry1(bnr, 1, 'error2')], 1, 7)
  call S('disable_range', [
      \ Entry1(bnr, 3, 'error1'),
      \ Entry2(bnr, 3, 'error1')
      \ ], 3, 7)

Expect ruby (s:disable_range silences in range):
  # test1-disable: error2
  def foo
    # test1-disable: error1 # test2-disable: error1
    if bar
      :bar
    else
      :baz
    end
    # test1-enable: error1 # test2-enable: error1
  end
  # test1-enable: error2

Execute (s:disable_range returns remainder with updated line numbers):
  let bnr = bufnr('')
  let g:remainder = S('disable_range', [
    \ Entry1(bnr, 3, 'error1'),
    \ Entry1(bnr, 5, 'error5'),
    \ NextlineOnly(bnr, 2, 'error1'),
    \ NextlineOnly(bnr, 7, 'error2')
    \ ], 1, 7)

  AssertEqual [
    \ NextlineOnly(bnr, 3, 'error1'),
    \ NextlineOnly(bnr, 8, 'error2')
    \ ], g:remainder

Expect ruby (s:disable_range updates line numbers):
  # test1-disable: error1 error5
  def foo
    if bar
      :bar
    else
      :baz
    end
  end
  # test1-enable: error1 error5

Given ruby:
  def foo
    :bar
  end

Execute:
  let bnr = bufnr('')
  call S('disable_range_linewise', [
    \ InlineOnly(bnr, 1, 'error1'),
    \ InlineOnly(bnr, 2, 'error2'),
    \ NextlineOnly(bnr, 1, 'error1'),
    \ NextlineOnly(bnr, 3, 'error3')
    \])

Expect ruby (s:disable_range_linewise silences range linewise):
  # nextline-only: error1
  def foo # inline-only: error1
    :bar # inline-only: error2
  # nextline-only: error3
  end

Execute (s:parse_cmd_line determines range from command line):
  let bnr = bufnr('')

  AssertEqual [ bnr,
    \ line("'<"),
    \ line("'>"),
    \], S('parse_cmd_line', "'<,'>ALESilence", [bnr]),
    \ "should parse range marks"

  AssertEqual [ bnr,
    \ 1,
    \ 3,
    \], S('parse_cmd_line', '1,3ALESilence', [bnr]),
    \ "should handle explicit range"

  AssertEqual [ bnr,
    \ 1,
    \], S('parse_cmd_line', '1ALESilence', [bnr]),
    \ "should handle single line"

  AssertEqual [ bnr,
    \ line('.')
    \], S('parse_cmd_line', 'ALESilence', [bnr]),
    \ "should return only current line without bang"

  AssertEqual [ bnr,
    \], S('parse_cmd_line', 'ALESilence!', [bnr]),
    \ "should return no range with bang"

  AssertEqual [ bnr,
    \ 1,
    \ 3,
    \], S('parse_cmd_line', '1,3ALESilence!', [bnr]),
    \ "should return parse range with bang"

Execute (s:filter_range returns errors in range):
  let E = EntryFor('test')
  let bnr = bufnr('')
  let line1 = E(bnr, 1, 'error1')
  let line2 = E(bnr, 2, 'error2')
  let line3 = E(bnr, 3, 'error3')
  call SetBufferInfo(bnr, line1, line2, line3)


  AssertEqual [line1, line2],        S('filter_range', bnr, 1, 2)
  AssertEqual [line2],               S('filter_range', bnr, 2)
  AssertEqual [line1, line2, line3], S('filter_range', bnr)

Execute (s:partition partitions a list by key):
  let list = [{'a': 1}, {'a': 1}, {'a': 2}, {'a': 3}, {'a': 3}]
  let expected = [[{'a': 1}, {'a': 1}], [{'a': 2}], [{'a': 3}, {'a': 3}]]
  AssertEqual expected, S('partition', list, 'a')

Execute (s:set_nested sets a value in nested dictionaries):
  call S('set_nested', g:, 'value', 'key1', 'key2', 'key3')
  AssertEqual 'value', g:key1.key2.key3
