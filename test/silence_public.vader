Include: silence_test_helper.vader
Before:
  let g:ale_silence_TESTING = 1
  let g:ale_loaded = 1
  runtime plugin/ale-silence.vim

  let g:ale_linter_silence_directive = TestLinters()

  let Entry1       = EntryFor('test1')
  let Entry2       = EntryFor('test2')
  let InlineOnly   = EntryFor('inline-only')
  let NextlineOnly = EntryFor('nextline-only')
  let Rubocop      = EntryFor('rubocop')

Execute (ale#silence#Format returns a directive formatter function):
  let FmtDir = ale#silence#Format('linter: %s')
  AssertEqual 'linter: hello directive', FmtDir(['hello', 'directive'])

Execute (ale#silence#Format can take a separator):
  let FmtDir = ale#silence#Format('linter: %s', ', ')
  AssertEqual 'linter: hello, directive', FmtDir(['hello', 'directive'])


Execute (ale_linters#<linter>#GetSilenceDirectives gets directives):
  let d = ale_silence#rubocop#GetSilenceDirectives()
  Assert type(d) is v:t_dict

Given ruby:
  def foo
    :bar
  end

Execute (ale#silence#List returns list of strings describing directives):
  let bnr = bufnr('')
  let g:ale_silence_TESTING_winbufnr = bnr
  let g:ale_silence_TESTING_linters = [{
  \ 'name': 'rubocop',
  \ 'read_buffer': 1,
  \}]

  call SetBufferInfo(bnr,
    \ Rubocop(1, 'error1'),
    \)
  AssertEqual [
    \ '==== rubocop ====',
    \ 'file       # rubocop: disable <err1> <err2> ...',
    \ 'inline     # rubocop: disable <err1> <err2> ...',
    \ 'start      # rubocop: disable <err1> <err2> ...',
    \ 'end        # rubocop: enable <err1> <err2> ...'
    \ ], ale#silence#List()

